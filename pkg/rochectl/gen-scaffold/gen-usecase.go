package gen_scaffold

import (
	. "github.com/dave/jennifer/jen"
	rocheAst "github.com/riita10069/roche/pkg/rochectl/ast"
	"go/ast"
)

func GenerateUsecase(structName string, targetStruct *ast.StructType) (*File, *File) {
	property, propertyType := rocheAst.GetPropertyByStructAst(targetStruct)
	createSignature := rocheAst.GetPostSignature(property, propertyType)
	updateSignature := append(createSignature, Id("id").Int64())
	dict := GenDict(property, property)

	usecaseFile := NewFile("usecase")
	repositoryFile := NewFile("repository")

	usecaseFile.HeaderComment("Code generated by roche")
	repositoryFile.HeaderComment("Code generated by roche")
	repositoryFile.Type().Id("I" + structName).Interface(
		Id("GetList").Params().Params(Index().Id(structName), Error()),
		Id("GetByID").Params(Id("id").Int64()).Params(Id("*" + structName), Error()),
		Id("Create").Params(createSignature...).Params(Id("*" + structName), Error()),
		Id("Update").Params(updateSignature...).Params(Id("*" + structName), Error()),
		Id("Delete").Params().Error(),
	)

	usecaseFile.Type().Id(structName + "Usecase").Struct(
		Id(structName + "Repo").Id("repository.I" + structName),
	)

	// NewStructNameUsecase Constructor
	usecaseFile.Func().Id("New" + structName + "Usecase").Params(Id("repo").Id("repository.I" + structName)).Id("repository.I" + structName).Block(
		Return(Op("&").Id(structName + "Usecase").Values(Dict{
			Id(structName + "Repo"):	Id("repo"),
		})),
	)

	// GetList
	usecaseFile.Func().Params(Id("u").Id(structName)).Id("GetList").Params().Params(Index().Id("*entity." + structName), Error()).Block(
		List(Id("usecases"), Err()).Op(":=").
			Id("u").Dot(structName + "Repo").Dot("GetAll").Call(),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Id("usecases"), Err()),
	)

	// GetByID
	usecaseFile.Func().Params(Id("u").Id(structName)).Id("GetByID").Params(Id("id").Int64()).Params(Id("*entity." + structName), Error()).Block(
		List(Id("usecase"), Err()).Op(":=").
			Id("u").Dot(structName + "Repo").Dot("GetByID").Call(Id("id")),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Id("usecase"), Err()),
	)

	// Create
	usecaseFile.Func().Params(Id("u").Id(structName)).Id("Create").Params(createSignature...).Params(Id("*entity." + structName), Error()).Block(
		Id("entity").Op(":=").Op("&").Id("entity." + structName).Values(dict),


		List(Id("created"), Err()).Op(":=").
			Id("u").Dot(structName + "Repo").Dot("Create").Call(Id("entity")),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Id("created"), Err()),
	)

	// Update
	usecaseFile.Func().Params(Id("u").Id(structName)).Id("Update").Params(updateSignature...).Params(Id("*entity." + structName), Error()).Block(
		List(Id("entity"), Err()).Op(":=").
			Id("u").Dot(structName + "Repo").Dot("GetByID").Call(Id("id")),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Id("entity").Op("=").Op("&").Id("entity." + structName).Values(dict),


		List(Id("updated"), Err()).Op(":=").
			Id("u").Dot(structName + "Repo").Dot("Update").Call(
			List(Id("entity"), Id("id")),
		),


		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Id("updated"), Err()),
	)

	// Delete
	usecaseFile.Func().Params(Id("u").Id(structName)).Id("Delete").Params(Id("id").Int64()).Params(Error()).Block(
		List(Id("entity"), Err()).Op(":=").
			Id("u").Dot(structName + "Repo").Dot("GetByID").Call(Id("id")),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Err().Op(":=").
			Id("u").Dot(structName + "Repo").Dot("Delete").Call(
			List(Id("entity"), Id("id")),
		),


		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Err()),
	)

	return repositoryFile, usecaseFile
}
