// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.5
// source: neko.proto

package testdata

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Neko struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NekoId  string   `protobuf:"bytes,1,opt,name=neko_id,json=nekoId,proto3" json:"neko_id,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size    string   `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Profile *Profile `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *Neko) Reset() {
	*x = Neko{}
	if protoimpl.UnsafeEnabled {
		mi := &file_neko_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Neko) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neko) ProtoMessage() {}

func (x *Neko) ProtoReflect() protoreflect.Message {
	mi := &file_neko_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neko.ProtoReflect.Descriptor instead.
func (*Neko) Descriptor() ([]byte, []int) {
	return file_neko_proto_rawDescGZIP(), []int{0}
}

func (x *Neko) GetNekoId() string {
	if x != nil {
		return x.NekoId
	}
	return ""
}

func (x *Neko) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Neko) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Neko) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B string `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_neko_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_neko_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_neko_proto_rawDescGZIP(), []int{1}
}

func (x *Profile) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *Profile) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

type ListNekosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNekosRequest) Reset() {
	*x = ListNekosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_neko_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNekosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNekosRequest) ProtoMessage() {}

func (x *ListNekosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neko_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNekosRequest.ProtoReflect.Descriptor instead.
func (*ListNekosRequest) Descriptor() ([]byte, []int) {
	return file_neko_proto_rawDescGZIP(), []int{2}
}

type ListNekosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nekos []*Neko `protobuf:"bytes,1,rep,name=nekos,proto3" json:"nekos,omitempty"`
}

func (x *ListNekosResponse) Reset() {
	*x = ListNekosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_neko_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNekosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNekosResponse) ProtoMessage() {}

func (x *ListNekosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_neko_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNekosResponse.ProtoReflect.Descriptor instead.
func (*ListNekosResponse) Descriptor() ([]byte, []int) {
	return file_neko_proto_rawDescGZIP(), []int{3}
}

func (x *ListNekosResponse) GetNekos() []*Neko {
	if x != nil {
		return x.Nekos
	}
	return nil
}

type GetNekoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NekoId string `protobuf:"bytes,1,opt,name=neko_id,json=nekoId,proto3" json:"neko_id,omitempty"`
}

func (x *GetNekoRequest) Reset() {
	*x = GetNekoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_neko_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNekoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNekoRequest) ProtoMessage() {}

func (x *GetNekoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neko_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNekoRequest.ProtoReflect.Descriptor instead.
func (*GetNekoRequest) Descriptor() ([]byte, []int) {
	return file_neko_proto_rawDescGZIP(), []int{4}
}

func (x *GetNekoRequest) GetNekoId() string {
	if x != nil {
		return x.NekoId
	}
	return ""
}

type CreateNekoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neko *Neko `protobuf:"bytes,1,opt,name=neko,proto3" json:"neko,omitempty"`
}

func (x *CreateNekoRequest) Reset() {
	*x = CreateNekoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_neko_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNekoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNekoRequest) ProtoMessage() {}

func (x *CreateNekoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neko_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNekoRequest.ProtoReflect.Descriptor instead.
func (*CreateNekoRequest) Descriptor() ([]byte, []int) {
	return file_neko_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNekoRequest) GetNeko() *Neko {
	if x != nil {
		return x.Neko
	}
	return nil
}

type UpdateNekoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neko *Neko `protobuf:"bytes,1,opt,name=neko,proto3" json:"neko,omitempty"`
}

func (x *UpdateNekoRequest) Reset() {
	*x = UpdateNekoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_neko_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNekoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNekoRequest) ProtoMessage() {}

func (x *UpdateNekoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neko_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNekoRequest.ProtoReflect.Descriptor instead.
func (*UpdateNekoRequest) Descriptor() ([]byte, []int) {
	return file_neko_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateNekoRequest) GetNeko() *Neko {
	if x != nil {
		return x.Neko
	}
	return nil
}

type DeleteNekoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NekoId string `protobuf:"bytes,1,opt,name=neko_id,json=nekoId,proto3" json:"neko_id,omitempty"`
}

func (x *DeleteNekoRequest) Reset() {
	*x = DeleteNekoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_neko_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNekoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNekoRequest) ProtoMessage() {}

func (x *DeleteNekoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neko_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNekoRequest.ProtoReflect.Descriptor instead.
func (*DeleteNekoRequest) Descriptor() ([]byte, []int) {
	return file_neko_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteNekoRequest) GetNekoId() string {
	if x != nil {
		return x.NekoId
	}
	return ""
}

var File_neko_proto protoreflect.FileDescriptor

var file_neko_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x65, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x72, 0x79,
	0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x04, 0x4e, 0x65, 0x6b, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x65, 0x6b, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x65, 0x6b, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x25, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x01,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x62, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x6b, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x6b, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x65, 0x6b, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x4e, 0x65, 0x6b, 0x6f, 0x52, 0x05, 0x6e, 0x65, 0x6b, 0x6f, 0x73, 0x22, 0x29, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x6b, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x65, 0x6b, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x65, 0x6b, 0x6f, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x6b, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x6e, 0x65, 0x6b, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x79, 0x6f,
	0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4e, 0x65, 0x6b, 0x6f, 0x52,
	0x04, 0x6e, 0x65, 0x6b, 0x6f, 0x22, 0x3c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x6b, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x65,
	0x6b, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4e, 0x65, 0x6b, 0x6f, 0x52, 0x04, 0x6e,
	0x65, 0x6b, 0x6f, 0x22, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x6b,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x6b, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x6b, 0x6f, 0x49,
	0x64, 0x32, 0xbf, 0x04, 0x0a, 0x0b, 0x4e, 0x65, 0x6b, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x60, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x65, 0x6b, 0x6f, 0x73,
	0x12, 0x1f, 0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x6b, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x6b, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x6e, 0x65,
	0x6b, 0x6f, 0x73, 0x12, 0x57, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x6b, 0x6f, 0x12, 0x1d,
	0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x6b, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4e, 0x65,
	0x6b, 0x6f, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6e, 0x65, 0x6b,
	0x6f, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x6b, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x59, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x6b, 0x6f, 0x12, 0x20, 0x2e, 0x72, 0x79, 0x6f,
	0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x6b, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72,
	0x79, 0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4e, 0x65, 0x6b,
	0x6f, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x06, 0x2f, 0x6e, 0x65, 0x6b, 0x6f,
	0x73, 0x3a, 0x04, 0x6e, 0x65, 0x6b, 0x6f, 0x12, 0x68, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x6b, 0x6f, 0x12, 0x20, 0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x6b, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4e, 0x65, 0x6b, 0x6f, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x32, 0x15, 0x2f, 0x6e, 0x65, 0x6b, 0x6f, 0x73, 0x2f, 0x7b, 0x6e, 0x65,
	0x6b, 0x6f, 0x2e, 0x6e, 0x65, 0x6b, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x04, 0x6e, 0x65, 0x6b,
	0x6f, 0x12, 0x60, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x6b, 0x6f, 0x12,
	0x20, 0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x6b, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x2a, 0x10, 0x2f, 0x6e, 0x65, 0x6b, 0x6f, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x6b, 0x6f, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x4e, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x6b, 0x6f, 0x12, 0x20, 0x2e, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65,
	0x6b, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_neko_proto_rawDescOnce sync.Once
	file_neko_proto_rawDescData = file_neko_proto_rawDesc
)

func file_neko_proto_rawDescGZIP() []byte {
	file_neko_proto_rawDescOnce.Do(func() {
		file_neko_proto_rawDescData = protoimpl.X.CompressGZIP(file_neko_proto_rawDescData)
	})
	return file_neko_proto_rawDescData
}

var file_neko_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_neko_proto_goTypes = []interface{}{
	(*Neko)(nil),              // 0: ryota.backend.Neko
	(*Profile)(nil),           // 1: ryota.backend.Profile
	(*ListNekosRequest)(nil),  // 2: ryota.backend.ListNekosRequest
	(*ListNekosResponse)(nil), // 3: ryota.backend.ListNekosResponse
	(*GetNekoRequest)(nil),    // 4: ryota.backend.GetNekoRequest
	(*CreateNekoRequest)(nil), // 5: ryota.backend.CreateNekoRequest
	(*UpdateNekoRequest)(nil), // 6: ryota.backend.UpdateNekoRequest
	(*DeleteNekoRequest)(nil), // 7: ryota.backend.DeleteNekoRequest
	(*emptypb.Empty)(nil),     // 8: google.protobuf.Empty
}
var file_neko_proto_depIdxs = []int32{
	1,  // 0: ryota.backend.Neko.profile:type_name -> ryota.backend.Profile
	0,  // 1: ryota.backend.ListNekosResponse.nekos:type_name -> ryota.backend.Neko
	0,  // 2: ryota.backend.CreateNekoRequest.neko:type_name -> ryota.backend.Neko
	0,  // 3: ryota.backend.UpdateNekoRequest.neko:type_name -> ryota.backend.Neko
	2,  // 4: ryota.backend.NekoService.SearchNekos:input_type -> ryota.backend.ListNekosRequest
	4,  // 5: ryota.backend.NekoService.GetNeko:input_type -> ryota.backend.GetNekoRequest
	5,  // 6: ryota.backend.NekoService.CreateNeko:input_type -> ryota.backend.CreateNekoRequest
	6,  // 7: ryota.backend.NekoService.UpdateNeko:input_type -> ryota.backend.UpdateNekoRequest
	7,  // 8: ryota.backend.NekoService.DeleteNeko:input_type -> ryota.backend.DeleteNekoRequest
	7,  // 9: ryota.backend.NekoService.CancelCreateNeko:input_type -> ryota.backend.DeleteNekoRequest
	3,  // 10: ryota.backend.NekoService.SearchNekos:output_type -> ryota.backend.ListNekosResponse
	0,  // 11: ryota.backend.NekoService.GetNeko:output_type -> ryota.backend.Neko
	0,  // 12: ryota.backend.NekoService.CreateNeko:output_type -> ryota.backend.Neko
	0,  // 13: ryota.backend.NekoService.UpdateNeko:output_type -> ryota.backend.Neko
	8,  // 14: ryota.backend.NekoService.DeleteNeko:output_type -> google.protobuf.Empty
	8,  // 15: ryota.backend.NekoService.CancelCreateNeko:output_type -> google.protobuf.Empty
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_neko_proto_init() }
func file_neko_proto_init() {
	if File_neko_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_neko_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Neko); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_neko_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_neko_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNekosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_neko_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNekosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_neko_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNekoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_neko_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNekoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_neko_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNekoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_neko_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNekoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_neko_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_neko_proto_goTypes,
		DependencyIndexes: file_neko_proto_depIdxs,
		MessageInfos:      file_neko_proto_msgTypes,
	}.Build()
	File_neko_proto = out.File
	file_neko_proto_rawDesc = nil
	file_neko_proto_goTypes = nil
	file_neko_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NekoServiceClient is the client API for NekoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NekoServiceClient interface {
	SearchNekos(ctx context.Context, in *ListNekosRequest, opts ...grpc.CallOption) (*ListNekosResponse, error)
	GetNeko(ctx context.Context, in *GetNekoRequest, opts ...grpc.CallOption) (*Neko, error)
	CreateNeko(ctx context.Context, in *CreateNekoRequest, opts ...grpc.CallOption) (*Neko, error)
	UpdateNeko(ctx context.Context, in *UpdateNekoRequest, opts ...grpc.CallOption) (*Neko, error)
	DeleteNeko(ctx context.Context, in *DeleteNekoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelCreateNeko(ctx context.Context, in *DeleteNekoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nekoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNekoServiceClient(cc grpc.ClientConnInterface) NekoServiceClient {
	return &nekoServiceClient{cc}
}

func (c *nekoServiceClient) SearchNekos(ctx context.Context, in *ListNekosRequest, opts ...grpc.CallOption) (*ListNekosResponse, error) {
	out := new(ListNekosResponse)
	err := c.cc.Invoke(ctx, "/ryota.backend.NekoService/SearchNekos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nekoServiceClient) GetNeko(ctx context.Context, in *GetNekoRequest, opts ...grpc.CallOption) (*Neko, error) {
	out := new(Neko)
	err := c.cc.Invoke(ctx, "/ryota.backend.NekoService/GetNeko", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nekoServiceClient) CreateNeko(ctx context.Context, in *CreateNekoRequest, opts ...grpc.CallOption) (*Neko, error) {
	out := new(Neko)
	err := c.cc.Invoke(ctx, "/ryota.backend.NekoService/CreateNeko", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nekoServiceClient) UpdateNeko(ctx context.Context, in *UpdateNekoRequest, opts ...grpc.CallOption) (*Neko, error) {
	out := new(Neko)
	err := c.cc.Invoke(ctx, "/ryota.backend.NekoService/UpdateNeko", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nekoServiceClient) DeleteNeko(ctx context.Context, in *DeleteNekoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ryota.backend.NekoService/DeleteNeko", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nekoServiceClient) CancelCreateNeko(ctx context.Context, in *DeleteNekoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ryota.backend.NekoService/CancelCreateNeko", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NekoServiceServer is the server API for NekoService service.
type NekoServiceServer interface {
	SearchNekos(context.Context, *ListNekosRequest) (*ListNekosResponse, error)
	GetNeko(context.Context, *GetNekoRequest) (*Neko, error)
	CreateNeko(context.Context, *CreateNekoRequest) (*Neko, error)
	UpdateNeko(context.Context, *UpdateNekoRequest) (*Neko, error)
	DeleteNeko(context.Context, *DeleteNekoRequest) (*emptypb.Empty, error)
	CancelCreateNeko(context.Context, *DeleteNekoRequest) (*emptypb.Empty, error)
}

// UnimplementedNekoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNekoServiceServer struct {
}

func (*UnimplementedNekoServiceServer) SearchNekos(context.Context, *ListNekosRequest) (*ListNekosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNekos not implemented")
}
func (*UnimplementedNekoServiceServer) GetNeko(context.Context, *GetNekoRequest) (*Neko, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeko not implemented")
}
func (*UnimplementedNekoServiceServer) CreateNeko(context.Context, *CreateNekoRequest) (*Neko, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNeko not implemented")
}
func (*UnimplementedNekoServiceServer) UpdateNeko(context.Context, *UpdateNekoRequest) (*Neko, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNeko not implemented")
}
func (*UnimplementedNekoServiceServer) DeleteNeko(context.Context, *DeleteNekoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNeko not implemented")
}
func (*UnimplementedNekoServiceServer) CancelCreateNeko(context.Context, *DeleteNekoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCreateNeko not implemented")
}

func RegisterNekoServiceServer(s *grpc.Server, srv NekoServiceServer) {
	s.RegisterService(&_NekoService_serviceDesc, srv)
}

func _NekoService_SearchNekos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNekosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NekoServiceServer).SearchNekos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ryota.backend.NekoService/SearchNekos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NekoServiceServer).SearchNekos(ctx, req.(*ListNekosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NekoService_GetNeko_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNekoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NekoServiceServer).GetNeko(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ryota.backend.NekoService/GetNeko",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NekoServiceServer).GetNeko(ctx, req.(*GetNekoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NekoService_CreateNeko_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNekoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NekoServiceServer).CreateNeko(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ryota.backend.NekoService/CreateNeko",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NekoServiceServer).CreateNeko(ctx, req.(*CreateNekoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NekoService_UpdateNeko_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNekoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NekoServiceServer).UpdateNeko(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ryota.backend.NekoService/UpdateNeko",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NekoServiceServer).UpdateNeko(ctx, req.(*UpdateNekoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NekoService_DeleteNeko_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNekoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NekoServiceServer).DeleteNeko(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ryota.backend.NekoService/DeleteNeko",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NekoServiceServer).DeleteNeko(ctx, req.(*DeleteNekoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NekoService_CancelCreateNeko_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNekoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NekoServiceServer).CancelCreateNeko(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ryota.backend.NekoService/CancelCreateNeko",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NekoServiceServer).CancelCreateNeko(ctx, req.(*DeleteNekoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NekoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ryota.backend.NekoService",
	HandlerType: (*NekoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchNekos",
			Handler:    _NekoService_SearchNekos_Handler,
		},
		{
			MethodName: "GetNeko",
			Handler:    _NekoService_GetNeko_Handler,
		},
		{
			MethodName: "CreateNeko",
			Handler:    _NekoService_CreateNeko_Handler,
		},
		{
			MethodName: "UpdateNeko",
			Handler:    _NekoService_UpdateNeko_Handler,
		},
		{
			MethodName: "DeleteNeko",
			Handler:    _NekoService_DeleteNeko_Handler,
		},
		{
			MethodName: "CancelCreateNeko",
			Handler:    _NekoService_CancelCreateNeko_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neko.proto",
}
