package gen_scaffold

import (
	. "github.com/dave/jennifer/jen"
	rocheAst "github.com/riita10069/roche/pkg/rochectl/ast"
	"go/ast"
)

func GenerateRepository(name string, targetStruct *ast.StructType)  {
	properties, propertyType := rocheAst.GetPropertyByStructAst(targetStruct)
	createSignature := rocheAst.GetPostSignature(properties, propertyType)
	updateSignature := append(createSignature, Id("id").Int64())
	dict := GenDict(properties, properties)
	scanArgument := propertyToScan(properties)

	infraRepoFile := NewFile("repository")

	infraRepoFile.HeaderComment("Code generated by roche")

	infraRepoFile.Type().Id(name).Struct(
		Id("DB").Id("*sql.DB"),
	)

	// NewStructNameUsecase Constructor
	infraRepoFile.Func().Id("New" + name + "Repository").Params(Id("db").Id("*sql.DB")).Id("repository.I" + name).Block(
		Return(Op("&").Id(name + "Usecase").Values(Dict{
			Id("DB"):	Id("db"),
		})),
	)

	// GetList
	infraRepoFile.Func().Params(Id("r").Id(name)).Id("FindAll").Params().Params(Index().Id("*entity." +name), Error()).Block(
		Var().Id("entity").Id("entity." + name),
		Var().Id("entities").Id("[]entity." + name),
		List(Id("rows"), Err()).Op(":=").
			Id("r").Dot("db").Dot("Query").Call(Id(FindAll())),
		Defer().Id("rows").Dot("Close").Call(),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		For(
			Id("rows").Dot("Next").Call(),
		).Block(
			Var().Params(updateSignature...),
			Err().Op(":=").Id("rows").Dot("Scan").Call(scanArgument...),
			If(
				Err().Op("!=").Nil(),
			).Block(
				Return(Id("nil"), Err()),
			),
			Id("entity").Op(":=").Op("&").Id("entity." + name).Values(dict),
			Id("entities").Op("=").Id("append").Call(Id("entities"), Id("entity")),
		),
		Err().Op("=").Id("rows").Dot("Err").Call(),
		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Id("entity"), Err()),
	)

	// GetByID
	infraRepoFile.Func().Params(Id("r").Id(name)).Id("Find").Params(Id("id").Int64()).Params(Id("*entity." + name), Error()).Block(
		List(Id("stmt"), Id("err")).Op(":=").Id("r").Dot("db").Dot("Prepare").Call(Id(Find())),
		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),
		Defer().Id("stmt").Dot("Close").Call(),


		Var().Params(updateSignature...),
		List(Id("rows"), Id("err")).Op(":=").Id("prep").Dot("QueryRow").Call(Id("1")).Id("Scan").Call(scanArgument...),
		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),
		Defer().Id("rows").Dot("Close").Call(),

		Id("entity").Op(":=").Op("&").Id("entity." + name).Values(dict),

		Return(Id("entity"), Err()),
	)

	// Create
	infraRepoFile.Func().Params(Id("u").Id(name)).Id("Create").Params(createSignature...).Params(Id("*entity." + name), Error()).Block(
		List(Id("stmt"), Id("err")).Op(":=").Id("r").Dot("db").Dot("Prepare").Call(Id(Create())),
		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),
		Defer().Id("stmt").Dot("Close").Call(),

		List(Id("result"), Id("err")).Op(":=").Id("stmt").Dot("Exec").Call(createSignature...),
		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		//List(Id("id"), Id("err")).Op(":=").Id("result").Dot("LastInsertId").Call(),
		//If(
		//	Err().Op("!=").Nil(),
		//).Block(
		//	Return(Id("nil"), Err()),
		//),

		Id("entity").Op(":=").Op("&").Id("entity." + name).Values(dict),

		Return(Id("entity"), Err()),
	)

	// Update
	infraRepoFile.Func().Params(Id("u").Id(name)).Id("Update").Params(updateSignature...).Params(Id("*entity." +name), Error()).Block(
		List(Id("stmt"), Id("err")).Op(":=").Id("r").Dot("db").Dot("Prepare").Call(Id(Update())),
		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),
		Defer().Id("stmt").Dot("Close").Call(),

		List(Id("result"), Id("err")).Op(":=").Id("stmt").Dot("Exec").Call(updateSignature...),
		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		//List(Id("affectedRows"), Id("err")).Op(":=").Id("result").Dot("RowsAffected").Call(),
		//If(
		//	Err().Op("!=").Nil(),
		//).Block(
		//	Return(Id("nil"), Err()),
		//),

		Id("entity").Op(":=").Op("&").Id("entity." + name).Values(dict),

		Return(Id("entity"), Err()),
	)

	// Delete
	infraRepoFile.Func().Params(Id("u").Id(name)).Id("Delete").Params(Id("id").Int64()).Params(Error()).Block(
		List(Id("stmt"), Id("err")).Op(":=").Id("r").Dot("db").Dot("Prepare").Call(Id(Sakujo())),
		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),
		Defer().Id("stmt").Dot("Close").Call(),

		List(Id("result"), Id("err")).Op(":=").Id("stmt").Dot("Exec").Call(Id("id")),
		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Err()),
	)

}

func propertyToScan(properties []string) []Code {
	var scanSignature []Code
	scanSignature = append(scanSignature, Id("&id"))
	for _, v := range properties {
		scanSignature = append(scanSignature, Id("&" + v))
	}
	return scanSignature
}

func FindAll() string {
	return "----------------find all-----------------"
}

func Find() string {
	return "----------------find-----------------"
}

func Create() string {
	return "----------------create-----------------"
}

func Update() string {
	return "----------------update-----------------"
}

func Sakujo() string {
	return "----------------delete-----------------"
}



