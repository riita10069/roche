package gen_scaffold

import (
	. "github.com/dave/jennifer/jen"
	rocheAst "github.com/riita10069/roche/pkg/rochectl/ast"
	"go/ast"
)

func GenerateUsecase(name string, targetStruct *ast.StructType, moduleName string) (*File, *File) {
	properties, propertiesType := rocheAst.GetPropertyByStructAst(targetStruct)
	createArgument := rocheAst.GetPostArgument(properties, propertiesType)
	updateArgument := append(createArgument, Id("id").Int64())
	dict := GenDict(properties, properties)
	var Usecase = name + "Usecase"

	usecaseFile := NewFile("usecase")
	repositoryFile := NewFile("repository")

	usecaseFile.HeaderComment("Code generated by roche")
	repositoryFile.HeaderComment("Code generated by roche")

	repositoryFile.ImportName(moduleName + "/domain/entity", "entity")
	repositoryFile.Type().Id("I" + name + "Repository").Interface(
		Id("GetList").Params().Params(Index().Id("*entity").Dot(name), Error()),
		Id("GetByID").Params(Id("id").Int64()).Params(Id("*entity").Dot(name), Error()),
		Id("Create").Params(Id("*entity").Dot(name)).Params(Id("*entity").Dot(name), Error()),
		Id("Update").Params(Int64(), Id("*entity").Dot(name)).Params(Id("*entity." + name), Error()),
		Id("Delete").Params(Int64()).Error(),
	)

	usecaseFile.ImportName(moduleName + "/domain/entity", "entity")
	usecaseFile.ImportName(moduleName + "/domain/repository", "repository")

	usecaseFile.Type().Id(name + "Usecase").Struct(
		Id(name + "Repo").Id("repository.I" + name + "Repostiroy"),
	)

	// NewStructNameUsecase Constructor
	usecaseFile.Func().Id("New" + Usecase).Params(Id("repo").Id("repository.I" + name + "Repository")).Id("*" +name + "Usecase").Block(
		Return(Op("&").Id(Usecase).Values(Dict{
			Id(name + "Repo"): Id("repo"),
		})),
	)

	// GetList
	usecaseFile.Func().Params(Id("u").Id(Usecase)).Id("GetList").Params().Params(Index().Id("*entity." +name), Error()).Block(
		List(Id("entities"), Err()).Op(":=").
			Id("u").Dot(name+ "Repo").Dot("GetList").Call(),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Id("entities"), Err()),
	)

	// GetByID
	usecaseFile.Func().Params(Id("u").Id(Usecase)).Id("GetByID").Params(Id("id").Int64()).Params(Id("*entity." +name), Error()).Block(
		List(Id("e"), Err()).Op(":=").
			Id("u").Dot(name+ "Repo").Dot("GetByID").Call(Id("id")),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Id("e"), Err()),
	)

	// Create
	usecaseFile.Func().Params(Id("u").Id(Usecase)).Id("Create").Params(createArgument...).Params(Id("*entity." +name), Error()).Block(
		Id("e").Op(":=").Op("&").Id("entity." +name).Values(dict),


		List(Id("created"), Err()).Op(":=").
			Id("u").Dot(name + "Repo").Dot("Create").Call(Id("e")),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Id("created"), Err()),
	)

	// Update
	usecaseFile.Func().Params(Id("u").Id(Usecase)).Id("Update").Params(updateArgument...).Params(Id("*entity." +name), Error()).Block(
		List(Id("e"), Err()).Op(":=").
			Id("u").Dot(name + "Repo").Dot("GetByID").Call(Id("id")),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Id("e").Op("=").Op("&").Id("entity." +name).Values(dict),


		List(Id("updated"), Err()).Op(":=").
			Id("u").Dot(name + "Repo").Dot("Update").Call(
			List(Id("id"), Id("e")),
		),


		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Id("nil"), Err()),
		),

		Return(Id("updated"), Err()),
	)

	// Delete
	usecaseFile.Func().Params(Id("u").Id(Usecase)).Id("Delete").Params(Id("id").Int64()).Params(Error()).Block(
		List(Id("_"), Err()).Op(":=").
			Id("u").Dot(name+ "Repo").Dot("GetByID").Call(Id("id")),

		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Err()),
		),

		Err().Op("=").
			Id("u").Dot(name + "Repo").Dot("Delete").Call(
			List(Id("id")),
		),


		If(
			Err().Op("!=").Nil(),
		).Block(
			Return(Err()),
		),

		Return(Err()),
	)

	return repositoryFile, usecaseFile
}
