// Code generated by roche

package usecase

type HelloRequestUsecase struct {
	HelloRequestRepo repository.IHelloRequest
}

func NewHelloRequestUsecase(repo repository.IHelloRequest) repository.IHelloRequest {
	return &HelloRequestUsecase{HelloRequestRepo: repo}
}
func (u HelloRequest) GetList() ([]*entity.HelloRequest, error) {
	usecases, err := u.HelloRequestRepo.GetAll()
	if err != nil {
		return nil, err
	}
	return usecases, err
}
func (u HelloRequest) GetByID(id int64) (*entity.HelloRequest, error) {
	usecase, err := u.HelloRequestRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	return usecase, err
}
func (u HelloRequest) Create(Name string) (*entity.HelloRequest, error) {
	entity := &entity.HelloRequest{Name: Name}
	created, err := u.HelloRequestRepo.Create(entity)
	if err != nil {
		return nil, err
	}
	return created, err
}
func (u HelloRequest) Update(Name string, id int64) (*entity.HelloRequest, error) {
	entity, err := u.HelloRequestRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	entity = &entity.HelloRequest{Name: Name}
	updated, err := u.HelloRequestRepo.Update(entity, id)
	if err != nil {
		return nil, err
	}
	return updated, err
}
func (u HelloRequest) Delete(id int64) error {
	entity, err := u.HelloRequestRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	err := u.HelloRequestRepo.Delete(entity, id)
	if err != nil {
		return nil, err
	}
	return updated, err
}
